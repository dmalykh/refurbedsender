// Code generated by mockery v2.12.0. DO NOT EDIT.

package mocks

import (
	context "context"

	sender "github.com/dmalykh/refurbedsender/sender"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// Sender is an autogenerated mock type for the Sender type
type Sender struct {
	mock.Mock
}

// Errors provides a mock function with given fields:
func (_m *Sender) Errors() chan *sender.Error {
	ret := _m.Called()

	var r0 chan *sender.Error
	if rf, ok := ret.Get(0).(func() chan *sender.Error); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *sender.Error)
		}
	}

	return r0
}

// Run provides a mock function with given fields: ctx
func (_m *Sender) Run(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Send provides a mock function with given fields: ctx, message
func (_m *Sender) Send(ctx context.Context, message sender.Message) error {
	ret := _m.Called(ctx, message)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sender.Message) error); ok {
		r0 = rf(ctx, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSender creates a new instance of Sender. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewSender(t testing.TB) *Sender {
	mock := &Sender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
