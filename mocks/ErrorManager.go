// Code generated by mockery v2.12.0. DO NOT EDIT.

package mocks

import (
	context "context"

	sender "github.com/dmalykh/refurbedsender/sender"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// ErrorManager is an autogenerated mock type for the ErrorManager type
type ErrorManager struct {
	mock.Mock
}

// AddError provides a mock function with given fields: ctx, m, err
func (_m *ErrorManager) AddError(ctx context.Context, m sender.Message, err error) {
	_m.Called(ctx, m, err)
}

// Done provides a mock function with given fields:
func (_m *ErrorManager) Done() {
	_m.Called()
}

// Errors provides a mock function with given fields:
func (_m *ErrorManager) Errors() chan *sender.Error {
	ret := _m.Called()

	var r0 chan *sender.Error
	if rf, ok := ret.Get(0).(func() chan *sender.Error); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *sender.Error)
		}
	}

	return r0
}

// NewErrorManager creates a new instance of ErrorManager. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewErrorManager(t testing.TB) *ErrorManager {
	mock := &ErrorManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
